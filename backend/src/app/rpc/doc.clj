;; This Source Code Form is subject to the terms of the Mozilla Public
;; License, v. 2.0. If a copy of the MPL was not distributed with this
;; file, You can obtain one at http://mozilla.org/MPL/2.0/.
;;
;; Copyright (c) KALEIDOS INC

(ns app.rpc.doc
  "API autogenerated documentation."
  (:require
   [app.common.data :as d]
   [app.common.exceptions :as ex]
   [app.common.schema :as sm]
   [app.common.schema.describe :as smd]
   [app.common.schema.openapi :as oapi]
   [app.config :as cf]
   [app.loggers.webhooks :as-alias webhooks]
   [app.rpc :as-alias rpc]
   [app.util.json :as json]
   [app.util.services :as sv]
   [app.util.template :as tmpl]
   [clojure.java.io :as io]
   [clojure.spec.alpha :as s]
   [cuerdas.core :as str]
   [integrant.core :as ig]
   [pretty-spec.core :as ps]
   [yetti.response :as yrs]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DOC (human readable)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn- prepare-doc-context
  [methods]
  (letfn [(fmt-spec [mdata]
            (when-let [spec (ex/ignoring (s/spec (::sv/spec mdata)))]
              (with-out-str
                (ps/pprint (s/form spec)
                           {:ns-aliases {"clojure.spec.alpha" "s"
                                         "clojure.core.specs.alpha" "score"
                                         "clojure.core" nil}}))))

          (fmt-schema [mdata key]
            (when-let [schema (get mdata key)]
              (smd/describe (sm/schema schema))))

          (get-context [type mdata]
            {:type (d/name type)
             :name (::sv/name mdata)
             :module (-> (:ns mdata) (str/split ".") last)
             :auth (:auth mdata true)
             :webhook (::webhooks/event? mdata false)
             :docs (::sv/docstring mdata)
             :deprecated (::deprecated mdata)
             :added (::added mdata)
             :changes (some->> (::changes mdata) (partition-all 2) (map vec))
             :spec (fmt-spec mdata)
             :entrypoint (when (= type :command)
                           (str (cf/get :public-uri) "/api/rpc/commands/" (::sv/name mdata)))
             :params-schema  (fmt-schema mdata ::sm/params)
             :result-schema (fmt-schema mdata ::sm/result)
             :webhook-schema (fmt-schema mdata ::sm/webhook)

             })]

    {:version (:main cf/version)
     :command-methods
     (->> (:commands methods)
          (map val)
          (map first)
          (map (partial get-context :command))
          (sort-by (juxt :module :name)))

     :query-methods
     (->> (:queries methods)
          (map val)
          (map first)
          (map (partial get-context :query))
          (sort-by (juxt :module :name)))

     :mutation-methods
     (->> (:mutations methods)
          (map val)
          (map first)
          (map (partial get-context :query))
          (sort-by (juxt :module :name)))}))

(defn- doc-handler
  [context]
  (if (contains? cf/flags :backend-api-doc)
    (fn [_]
      {::yrs/status 200
       ::yrs/body (-> (io/resource "app/templates/api-doc.tmpl")
                      (tmpl/render context))})
    (fn [_]
      {::yrs/status 404})))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OPENAPI / SWAGGER (v3.1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn prepare-openapi-context
  [methods]
  (letfn [(gen-response-doc [tsx schema]
            (let [example (sm/generate schema)
                  example (sm/encode schema example {:registry sm/default-registry} sm/output-transformer)]
              {:default
               {:description "A default response"
                :content
                {"application/json"
                 {:schema tsx
                  :example example}}}}))

          (gen-params-doc [tsx schema]
            (let [example (sm/generate schema)
                  example (sm/encode schema example {:registry sm/default-registry} sm/output-transformer)]
              {:required true
               :content
               {"application/json"
                {:schema tsx
                 :example example}}}))

          (gen-method-doc [options mdata]
            (let [pschema (::sm/params mdata)
                  rschema (::sm/result mdata)

                  sparams (-> pschema (oapi/transform options) (gen-params-doc pschema))
                  sresp   (some-> rschema (oapi/transform options) (gen-response-doc rschema))

                  rpost   {:description (::sv/docstring mdata)
                           :deprecated (::deprecated mdata false)
                           :requestBody sparams}

                  rpost  (cond-> rpost
                           (some? sresp)
                           (assoc :responses sresp))]

              {:name (-> mdata ::sv/name d/name)
               :module (-> (:ns mdata) (str/split ".") last)
               :repr {:post rpost}}))
          ]

    (let [definitions (atom {})
          options {:registry sm/default-registry
                   ::oapi/definitions-path "#/components/schemas/"
                   ::oapi/definitions definitions}

          paths   (binding [oapi/*definitions* definitions]
                    (->> (:commands methods)
                         (map (comp first val))
                         (filter ::sm/params)
                         (map (partial gen-method-doc options))
                         (sort-by (juxt :module :name))
                         (map (fn [doc]
                                [(str/ffmt "/commands/%" (:name doc)) (:repr doc)]))
                         (into {})))]
    {:openapi "3.0.0"
     :info {:version (:main cf/version)}
     :servers [{:url (str/ffmt "%/api/rpc" (cf/get :public-uri))
                ;; :description "penpot backend"
                }]
     :security
     {:api_key []}

     :paths paths
     :components {:schemas @definitions}})))

(defn openapi-json-handler
  [context]
  (if (contains? cf/flags :backend-openapi-doc)
    (fn [_]
      {::yrs/status 200
       ::yrs/headers {"content-type" "application/json; charset=utf-8"}
       ::yrs/body (json/encode context)})

    (fn [_]
      {::yrs/status 404})))

(defn openapi-handler
  []
  (if (contains? cf/flags :backend-openapi-doc)
    (fn [_]
      (let [swagger-js (slurp (io/resource "app/assets/swagger-ui-4.18.0.js"))
            swagger-cs (slurp (io/resource "app/assets/swagger-ui-4.18.0.css"))
            context    {:public-uri (cf/get :public-uri)
                        :swagger-js swagger-js
                        :swagger-css swagger-cs}]
        {::yrs/status 200
         ::yrs/headers {"content-type" "text/html"}
         ::yrs/body (-> (io/resource "app/templates/openapi.tmpl")
                        (tmpl/render context))}))
    (fn [_]
      {::yrs/status 404})))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MODULE INIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(s/def ::routes vector?)

(defmethod ig/pre-init-spec ::routes [_]
  (s/keys :req-un [::rpc/methods]))

(defmethod ig/init-key ::routes
  [_ {:keys [methods] :as cfg}]
  [(let [context (prepare-doc-context methods)]
     ["/_doc"
      {:handler (doc-handler context)
       :allowed-methods #{:get}}])

   (let [context (prepare-openapi-context methods)]
     [["/openapi"
       {:handler (openapi-handler)
        :allowed-methods #{:get}}]
      ["/openapi.json"
       {:handler (openapi-json-handler context)
        :allowed-methods #{:get}}]])])
